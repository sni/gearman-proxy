##############################
# Gearman Proxy Config
#

# default is 0.
# 0 gives less informations
# 1 writes every datahandle into the logfile
#$debug=0;

# path to the logfile, will use stdout if not set
#$logfile="var/log/gearman/proxy.log";

# Set some variables to use in queue definitions
# defines the remote Port of the gearmand. Default is 4730
$remotePort="4730";

# defines the server where the jobs will come from
$remoteHost="10.0.1.99";

# defines the server where the jobs will come from
$localHost="127.0.0.1";

# defines the remote Port of the gearmand. Default is 4730
$localPort="4730";

# run metrics worker on this queue to retrieve status and metrics
$statusqueue = "$localHost:$localPort/proxy_status";

# Simple "forward" queues which will be moved to the remote host
$queues->{"$localHost:$localPort/hostgroup_Gearmanproxy"} = "$remoteHost:$remotePort/hostgroup_Gearmanproxy";
$queues->{"$localHost:$localPort/hosts"}                  = "$remoteHost:$remotePort/hosts";
$queues->{"$remoteHost:$remotePort/check_results"}        = "$localHost:$localPort/check_results";

# more complex queues with de/encryption and result_queue rewriting
$queues->{"$localHost:$localPort/servicegroup_special"} = {
    "decrypt"       => "local password",   # can be "file:path to password file"
    "encrypt"       => "remote password",  # can be "file:path to password file"
    "remoteQueue"   => "$remoteHost:$remotePort/servicegroup_special",
    # change job content while passing it to another server (happens after decrypt stage and before the encrypt stage)
    "data_callback" => sub { my($data) = @_; $data =~ s/^result_queue=.*$/result_queue=results_servicegroup_special/gmx; return($data); },
};
# re-encrypt remote results into local result queue
$queues->{"$remoteHost:$remotePort/results_servicegroup_special"} = {
    "decrypt"       => "remote password",
    "encrypt"       => "local password",
    "remoteQueue"   => "$localHost:$localPort/result_queue",
};
